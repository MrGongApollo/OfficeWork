(function ($) { $.setting = {}, $.ban = { banMouseRight: function (fn) { $("body").bind("contextmenu", function () { return false }); if (fn) { fn() } }, banSelectAll: function (fn) { $("body").bind("selectstart", function () { return false }); if (fn) { fn() } }, banF12: function (fn) { $("body").bind("keypress", function (e) { if (e.keyCode == 123) { return false } }) }, banAll: function () { $.ban.banMouseRight(); $.ban.banSelectAll(); $.ban.banF12() } }, $.web = { today: function (_s) { var date = new Date(), MM = date.getMonth() + 1, Month = MM < 10 ? "0" + MM : MM, Day = date.getDate() < 10 ? "0" + date.getDate() : date.getDate(); return _s ? date.getFullYear() + _s + Month + _s + Day : date.getFullYear() + "-" + Month + "-" + Day }, Now: function (_s) { var date = new Date(), MM = date.getMonth() + 1, Month = MM < 10 ? "0" + MM : MM, Day = date.getDate() < 10 ? "0" + date.getDate() : date.getDate(), HH = date.getHours(), mm = date.getMinutes(), ss = date.getSeconds(); return _s ? date.getFullYear() + _s + Month + _s + Day + " " + HH + ":" + mm + ":" + ss : date.getFullYear() + "-" + Month + "-" + Day + " " + HH + ":" + mm + ":" + ss }, dateAddDays: function (date, days) { dateArray = String(date).split("-"); if (dateArray.length != 3) { return } var newDate = new Date(new Date(dateArray[0], eval(dateArray[1]) - 1, dateArray[2]).valueOf() + days * 24 * 60 * 60 * 1000), newYear = newDate.getFullYear(), newMonth = (newDate.getMonth() < 9 ? "0" : "") + (newDate.getMonth() + 1), newDay = (newDate.getDate() < 10 ? "0" : "") + newDate.getDate(); return newYear + "-" + newMonth + "-" + newDay }, changeDateFormat: function (cellval, timeformat) { if (!cellval) { return "" } if (cellval.indexOf("/Date") == 0) { d = new Date(); var date = new Date(parseInt(cellval.replace("/Date(", "").replace(")/", ""), 10)); var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1; var currentDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate(); var type = "-"; type = timeformat ? timeformat : type; return date.getFullYear() + type + month + type + currentDate } else { return cellval } }, changetoLocaleTimeString: function (cellval, timeformat) { if (!cellval) { return "" } d = new Date(); var date = new Date(parseInt(cellval.substr(6))); var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1; var currentDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate(); var hour = date.getHours() < 10 ? "0" + date.getHours() : date.getHours(); var minute = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes(); var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds(); var type = "-"; type = timeformat ? timeformat : type; return date.getFullYear() + type + month + type + currentDate + " " + hour + ":" + minute + ":" + seconds }, changetoLocaleTimeString2hm: function (cellval, timeformat) { if (!cellval) { return "" } d = new Date(); var date = new Date(parseInt(cellval.substr(6))); var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1; var currentDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate(); var hour = date.getHours() < 10 ? "0" + date.getHours() : date.getHours(); var minute = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes(); var type = "-"; type = timeformat ? timeformat : type; return date.getFullYear() + type + month + type + currentDate + " " + hour + ":" + minute }, dateFormat: function (dataValue, fmtOpts) { var formatOptions = { numeric: /N\d{1}/ig, percent: /P\d{1}/ig, currency: /C/ig, datetime: /yy(yy{0,1})|M{2}|dd|HH{1}|mm{1}|ss{1}/ig }; if (fmtOpts.match(formatOptions.datetime) !== null) { var _dataValue = dataValue; var _dateParse = { msJsonDate: /^\/Date\(\d*(|\+?\d*)\)\/$/ig, stringDate: /^\d{4}[\.\/-]?[0-1]{1}[0-9]{1}(|[\.\/-]?[0-3]{1}[0-9]{1}[\.\/-]?|\s?[0-1]{1}[0-9]{1}|:?[0-1]{1}[0-9]{1}|:?[0-1]{1}[0-9]{1}|:?\d*)$/ig, dtData: /^\d{8}\s\d{2}:\d{2}:\d{2}$/, cludeTDate: /^\d{4}-\d{2}-\d{2}(T|t)\d{2}:\d{2}:\d{2}/ }; if (dataValue instanceof Date === false) { if (_dateParse.msJsonDate.test(dataValue)) { var _regex = /^\/Date\(|\)\/$/ig; var _dates = (dataValue + "").replace(_regex, "").split("+"); if (_dates.length > 1) { _dataValue = new Date(parseInt(_dates[0]) + parseInt(_dates[1])) } else { var d = new Date(); var localOffset = d.getTimezoneOffset() * 60000; localOffset = 0; _dataValue = new Date(parseInt(_dates[0]) + localOffset) } } else { if (_dateParse.stringDate.test(dataValue)) { if ($.isNumeric(dataValue) === true) { var _yy = (dataValue + "").substr(0, 4); var _mm = (dataValue + "").substr(4, 2); var _dd = (dataValue + "").substr(6, 2); var _hh = (dataValue + "").substr(8, 2); var _mi = (dataValue + "").substr(10, 2); var _ss = (dataValue + "").substr(12, 2); _dataValue = new Date(_yy + "/" + _mm + "/" + (_dd === "" ? "01" : _dd) + " " + (_hh === "" ? "00" : _hh) + ":" + (_mi === "" ? "00" : _mi) + ":" + (_ss === "" ? "00" : _ss)) } else { _dataValue = (dataValue + "").replace(/[-\.]/g, "/"); _dataValue = new Date(_dataValue) } } else { if (_dateParse.dtData.test(dataValue)) { var _yy = (dataValue + "").substr(0, 4); var _mm = (dataValue + "").substr(4, 2); var _dd = (dataValue + "").substr(6, 2); var _hh = (dataValue + "").substr(8); _dataValue = new Date(_yy + "/" + _mm + "/" + _dd + _hh) } else { if (_dateParse.cludeTDate.test(dataValue)) { var _yy = (dataValue + "").substr(0, 4); var _mm = (dataValue + "").substr(5, 2); var _dd = (dataValue + "").substr(8, 2); var _hh = (dataValue + "").substr(11); _dataValue = new Date(_yy + "/" + _mm + "/" + _dd + " " + _hh) } } } } } var zeroize = function (value, length) { if (!length) { length = 2 } value = new String(value); for (var i = 0, zeros = ""; i < (length - value.length) ; i++) { zeros += "0" } return zeros + value }; if (_dataValue instanceof Date) { return fmtOpts.replace(formatOptions.datetime, function ($0) { switch ($0) { case "dd": return zeroize(_dataValue.getDate()); case "MM": return zeroize(_dataValue.getMonth() + 1); case "yy": return new String(_dataValue.getFullYear()).substr(2); case "yyyy": return _dataValue.getFullYear(); case "HH": return zeroize(_dataValue.getHours()); case "mm": return zeroize(_dataValue.getMinutes()); case "ss": return zeroize(_dataValue.getSeconds()) } }) } else { return dataValue } } else { return dataValue } }, getUrlParam: function (name) { var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); var r = window.location.search.substr(1).match(reg); if (r != null) { return unescape(r[2]) } return null }, IsNullOrEmpty: function (_v) { if (_v) { var ret; if (_v == null || _v == "") { ret = true } else { ret = false } return ret } }, Substr: function (_str, _len, _t) { if (_str && _len) { return _str.length > _len ? _str.substr(0, _len) + (_t || "") : _str } return "" }, AddLoading: function (_txt) { if ($("#wxloading").length == 0) { $("<div>", { id: "wxloading" }).append($("<div>", { "class": "wx_loading_inner" }).append($("<svg>", { "class": "wx_loading_icon" })).append($("<span>").text(_txt ? _txt : "正在加载..."))).appendTo($("body")) } else { $("#wxloading").show() } }, RemoveLoading: function () { $("#wxloading").remove() }, AddLoadingSetClose: function (_txt, _fn, _time) { $.web.AddLoading(_txt); setTimeout(function () { if (_fn) { _fn() } $.web.RemoveLoading() }, _time || 1000) }, toast: function (_option) { switch (typeof _option) { case "string": _option = { text: _option }; break; case "object": break; default: console.warn("toast参数不合法，必须是object或者string类型"); return } var _config = { text: "", duration: 3000 }; var ScreenWidth = $(window).width(); $.extend(_config, _option); $("#wxtoast").length == 0 ? "" : $("#wxtoast").stop().unbind().remove(); $("body").append($("<div>", { id: "wxtoast" }).hide().text(_config.text)); var $toast = $("#wxtoast"); $toast.css("left", (ScreenWidth - $toast.width()) / 2); $("#wxtoast").show().fadeOut(_config.duration, function () { $("#wxtoast").remove() }) }, get: function (_option, _data) { try { var ajaxconfig = { type: "GET", contentType: "application/json;application/x-www-form-urlencoded;charset=utf-8", dataType: "json", async: false, }; if (!_option) { console.warn("参数不可为空！"); return } switch (typeof _option) { case "string": ajaxconfig.url = encodeURI(_option); ajaxconfig.data = _data || {}; break; case "object": _option.url = encodeURI(_option.url); $.extend(ajaxconfig, _option); break; default: console.warn("参数类型不正确，必须是string,或者object"); return } return $.ajax(ajaxconfig) } catch (e) { console.error(e.message) } }, getAsync: function (_option, _data) { try { var ajaxconfig = { type: "GET", contentType: "application/json;application/x-www-form-urlencoded;charset=utf-8", dataType: "json" }; if (!_option) { console.warn("参数不可为空！"); return } switch (typeof _option) { case "string": ajaxconfig.url = encodeURI(_option); ajaxconfig.data = _data || {}; break; case "object": _option.url = encodeURI(_option.url); $.extend(ajaxconfig, _option); break; default: console.warn("参数类型不正确，必须是string,或者object"); return } return $.ajax(ajaxconfig) } catch (e) { console.error(e.message) } }, post: function (_option, _data) { try { if (!_option) { console.warn("参数不可为空！"); return } var ajaxconfig = { type: "POST", async: false, contentType: "application/json;application/x-www-form-urlencoded;charset=utf-8", dataType: "json" }; switch (typeof _option) { case "object": $.extend(ajaxconfig, _option); break; case "string": ajaxconfig.data = _data || {}; ajaxconfig.url = _option; break; default: console.warn("参数类型不合法"); return } ajaxconfig.url = encodeURI(ajaxconfig.url); ajaxconfig.data = JSON.stringify(ajaxconfig.data); return $.ajax(ajaxconfig) } catch (e) { console.error(e.message) } }, postAsync: function (_option, _data) { try { if (!_option) { console.warn("参数不可为空！"); return } var ajaxconfig = { type: "POST", contentType: "application/json;application/x-www-form-urlencoded;charset=utf-8", dataType: "json" }; switch (typeof _option) { case "object": $.extend(ajaxconfig, _option); break; case "string": ajaxconfig.data = _data || {}; ajaxconfig.url = _option; break; default: console.warn("参数类型不合法"); return } ajaxconfig.url = encodeURI(ajaxconfig.url); ajaxconfig.data = JSON.stringify(ajaxconfig.data); return $.ajax(ajaxconfig) } catch (e) { console.error(e.message) } } } })(jQuery);